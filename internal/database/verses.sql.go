// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: verses.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createVerse = `-- name: CreateVerse :one
INSERT INTO 
    verses (id, created_at, updated_at, num_verse, text, chapter_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, num_verse, text, chapter_id
`

type CreateVerseParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	NumVerse  int32
	Text      string
	ChapterID uuid.UUID
}

func (q *Queries) CreateVerse(ctx context.Context, arg CreateVerseParams) (Verse, error) {
	row := q.db.QueryRowContext(ctx, createVerse,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.NumVerse,
		arg.Text,
		arg.ChapterID,
	)
	var i Verse
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NumVerse,
		&i.Text,
		&i.ChapterID,
	)
	return i, err
}

const getFilteredVersesByWord = `-- name: GetFilteredVersesByWord :many
SELECT b.name as Libro,
       c.num_chapter as Capitulo,
       v.num_verse as Versiculo,
       v.text as Texto
FROM public.verses as v
JOIN public.chapters as c ON c.id = v.chapter_id
JOIN public.books as b ON b.id = c.book_id
WHERE UNACCENT(v.text) ~* UNACCENT('\m' || $1 || '\M')
`

type GetFilteredVersesByWordRow struct {
	Libro     string
	Capitulo  int32
	Versiculo int32
	Texto     string
}

func (q *Queries) GetFilteredVersesByWord(ctx context.Context, dollar_1 sql.NullString) ([]GetFilteredVersesByWordRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilteredVersesByWord, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredVersesByWordRow
	for rows.Next() {
		var i GetFilteredVersesByWordRow
		if err := rows.Scan(
			&i.Libro,
			&i.Capitulo,
			&i.Versiculo,
			&i.Texto,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
