// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO 
    books (id, created_at, updated_at, name, book_order, num_chapters, num_verses, version_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, book_order, num_chapters, num_verses, version_id
`

type CreateBookParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	BookOrder   int32
	NumChapters int32
	NumVerses   int32
	VersionID   uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.BookOrder,
		arg.NumChapters,
		arg.NumVerses,
		arg.VersionID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.BookOrder,
		&i.NumChapters,
		&i.NumVerses,
		&i.VersionID,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id,
       created_at,
       updated_at,
       name,
       book_order,
       num_chapters,
       num_verses,
       version_id
FROM books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.BookOrder,
			&i.NumChapters,
			&i.NumVerses,
			&i.VersionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
